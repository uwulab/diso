cmake_minimum_required(VERSION 3.16 FATAL_ERROR)
project(diso C CXX)

find_package(PkgConfig REQUIRED)
set(PKG_CONFIG_LIBDIR "${ARIA2_DEPS_ROOT}/usr/local/lib")
set(PKG_CONFIG_PATH "${ARIA2_DEPS_ROOT}/usr/local/lib/pkgconfig")
set(ENV{PKG_CONFIG_LIBDIR} "${PKG_CONFIG_LIBDIR}")
set(ENV{PKG_CONFIG_PATH} "${PKG_CONFIG_PATH}")

set(LIBSSH2_PC "${PKG_CONFIG_PATH}/libssh2.pc")
file(STRINGS ${LIBSSH2_PC} LIBSSH2_PC_FILE)
set(LIBSSH2_PC_FILE_PATCHED "${LIBSSH2_PC}.patched")
file(REMOVE ${LIBSSH2_PC_FILE_PATCHED})
while(LIBSSH2_PC_FILE)
    list(POP_FRONT LIBSSH2_PC_FILE LINE)
    string(REPLACE "/Users/runner/work/aria2-deps/aria2-deps/deps/openssl/" "/" REPLACED_LINE "${LINE}")
    file(APPEND "${LIBSSH2_PC_FILE_PATCHED}" "${REPLACED_LINE}\n")
endwhile()
file(RENAME ${LIBSSH2_PC_FILE_PATCHED} ${LIBSSH2_PC})

pkg_check_modules(PKG_ARIA2 REQUIRED libaria2)
pkg_check_modules(PKG_LIBXML2 REQUIRED libxml-2.0)
pkg_check_modules(PKG_OpenSSL REQUIRED OpenSSL)
pkg_check_modules(PKG_LIBSSH2 REQUIRED libssh2)
pkg_check_modules(PKG_LIBCARES REQUIRED libcares)
pkg_check_modules(PKG_SQLITE3 REQUIRED sqlite3)

set(PKG_ARIA2_INCLUDE_DIRS "${ARIA2_DEPS_ROOT}${PKG_ARIA2_INCLUDE_DIRS}")
set(PKG_LIBXML2_INCLUDE_DIRS "${ARIA2_DEPS_ROOT}${PKG_LIBXML2_INCLUDE_DIRS}")
set(PKG_OpenSSL_INCLUDE_DIRS "${ARIA2_DEPS_ROOT}${PKG_OpenSSL_INCLUDE_DIRS}")
set(PKG_LIBSSH2_INCLUDE_DIRS "${ARIA2_DEPS_ROOT}${PKG_LIBSSH2_INCLUDE_DIRS}")
set(PKG_LIBCARES_INCLUDE_DIRS "${ARIA2_DEPS_ROOT}${PKG_LIBCARES_INCLUDE_DIRS}")
set(PKG_SQLITE3_INCLUDE_DIRS "${ARIA2_DEPS_ROOT}${PKG_SQLITE3_INCLUDE_DIRS}")

set(PKG_ARIA2_LIBRARY_DIRS "${ARIA2_DEPS_ROOT}${PKG_ARIA2_LIBRARY_DIRS}")
set(PKG_LIBXML2_LIBRARY_DIRS "${ARIA2_DEPS_ROOT}${PKG_LIBXML2_LIBRARY_DIRS}")
set(PKG_OpenSSL_LIBRARY_DIRS "${ARIA2_DEPS_ROOT}${PKG_OpenSSL_LIBRARY_DIRS}")
set(PKG_LIBSSH2_LIBRARY_DIRS "${ARIA2_DEPS_ROOT}${PKG_LIBSSH2_LIBRARY_DIRS}")
set(PKG_LIBCARES_LIBRARY_DIRS "${ARIA2_DEPS_ROOT}${PKG_LIBCARES_LIBRARY_DIRS}")
set(PKG_SQLITE3_LIBRARY_DIRS "${ARIA2_DEPS_ROOT}${PKG_SQLITE3_LIBRARY_DIRS}")

set(CMAKE_CXX_STANDARD 23)
add_executable(diso
    "src/main.cpp"
)
target_include_directories(diso PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/3rd_party")
target_include_directories(diso PUBLIC 
    ${PKG_ARIA2_INCLUDE_DIRS}
    ${PKG_LIBXML2_INCLUDE_DIRS}
    ${PKG_OpenSSL_INCLUDE_DIRS}
    ${PKG_LIBSSH2_INCLUDE_DIRS}
    ${PKG_LIBCARES_INCLUDE_DIRS}
    ${PKG_SQLITE3_INCLUDE_DIRS}
)
target_link_directories(diso PUBLIC
    ${PKG_ARIA2_LIBRARY_DIRS}
    ${PKG_LIBXML2_LIBRARY_DIRS}
    ${PKG_OpenSSL_LIBRARY_DIRS}
    ${PKG_LIBSSH2_LIBRARY_DIRS}
    ${PKG_LIBCARES_LIBRARY_DIRS}
    ${PKG_SQLITE3_LIBRARY_DIRS}
)
target_link_libraries(diso
    ${PKG_ARIA2_LIBRARIES}
    ${PKG_LIBXML2_LIBRARIES}
    ${PKG_OpenSSL_LIBRARIES}
    ${PKG_LIBSSH2_LIBRARIES}
    ${PKG_LIBCARES_LIBRARIES}
    ${PKG_SQLITE3_LIBRARIES}
)
target_compile_options(diso PUBLIC
    ${PKG_ARIA2_CFLAGS_OTHER}
    ${PKG_LIBXML2_CFLAGS_OTHER}
    ${PKG_OpenSSL_CFLAGS_OTHER}
    ${PKG_LIBSSH2_CFLAGS_OTHER}
    ${PKG_LIBCARES_CFLAGS_OTHER}
    ${PKG_SQLITE3_CFLAGS_OTHER}
)

file(COPY ${PKG_CONFIG_LIBDIR} DESTINATION ${CMAKE_CURRENT_BINARY_DIR})

if(UNIX AND NOT APPLE)
    set_target_properties(diso PROPERTIES INSTALL_RPATH "\$ORIGIN/lib:\$ORIGIN/lib64")
elseif(UNIX AND APPLE)
    set_target_properties(diso PROPERTIES INSTALL_RPATH "@loader_path/lib")
endif()

if(WIN32)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /bigobj /wd4996 /wd4267 /wd4068")
else()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
    if (UNIX AND APPLE)
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -framework CoreFoundation -framework Security -lz")
    endif()
    if (CMAKE_BUILD_TYPE STREQUAL "Debug")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O0 -g3")
    else()
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3")
    endif()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-function -Wno-sign-compare -Wno-unused-parameter -Wno-missing-field-initializers -Wno-deprecated-declarations")
endif()
